{"version":3,"file":"homework_injector.min.js","sources":["../src/homework_injector.js"],"sourcesContent":["define(function() {\n    return {\n        init: function(homework) {\n            // Check that the current page contains a calendar to stop the code on other pages with homework block.\n            if (document.querySelector('[data-region=\"calendar\"]') && JSON.stringify(homework).length > 1) {\n\n                // Function that shows the content in the moodle modal.\n                const addContentToModal = () => {\n                    // Run a timeout of 500ms to make sure the modal and content are there.\n                    setTimeout(() => {\n                        // Get the modal and determine if is there\n                        const modalContent = document.querySelector('.modal-content');\n                        if (modalContent) {\n                            // Get the inlaying container and determine if it's there.\n                            const summaryContainer = modalContent.querySelector('.summary-modal-container');\n                            if (summaryContainer) {\n                                // Get the eventid from the container\n                                let eventid = summaryContainer.getAttribute(\"data-event-id\");\n\n                                // Get the container that contains text data\n                                const containerFluid = summaryContainer.querySelector('.container-fluid');\n                                // Loop through all links in the text area to see if one contains a link to a course and if so what is the course id\n                                let foundCourseLink = false;\n                                let Courseid;\n                                containerFluid.querySelectorAll('a').forEach((element) => {\n                                    if (element.href.includes('/course')) {\n                                        const regex = /course\\/view\\.php\\?id=(\\d+)/;\n                                        const match = element.href.match(regex);\n                                        if (match) {\n                                            Courseid = match[1]; // Extract the ID\n                                        }\n                                        foundCourseLink = true;\n                                        return false; // Break out of the forEach loop\n                                    }\n                                });\n\n                                // Get the correct homework which has the correct eventid otherwise cancel\n                                let filteredHomework = Object.values(homework).filter((work) => {\n                                    return work.eventid === eventid;\n                                });\n                                if (filteredHomework.length === 0) {\n                                    return;\n                                }\n\n                                // Determine if the modal is in the dashboard, a course link and a there isn't already a homeworkRow\n                                if (foundCourseLink && window.location.href.includes(\"/my\") && !document.getElementById(\"homeworkRow\")) {\n                                    // Set the div up according to the moodle standard\n                                    const homeworkDiv = document.createElement('div');\n                                    homeworkDiv.className = 'row mt-1';\n                                    homeworkDiv.id = 'homeworkRow';\n\n                                    const homeworkIconDiv = document.createElement('div');\n                                    homeworkIconDiv.className = 'col-1';\n                                    homeworkIconDiv.innerHTML = '<i class=\"icon fa fa-align-left fa-fw\" title=\"Description\" role=\"img\" aria-label=\"Description\"></i>';\n\n                                    const homeworkLinkDiv = document.createElement('div');\n                                    homeworkLinkDiv.className = 'description-content col-11';\n                                    // Create the new string with all homework info for that course\n                                    let newString = '';\n                                    Object.values(filteredHomework).forEach((homeworkInfo) => {\n                                        let convertedTime = new Date(homeworkInfo.duedate * 1000);\n                                        newString += `<p>HomeWork name = ${homeworkInfo.name} <br>\n                                                      Intro = ${homeworkInfo.intro ? homeworkInfo.intro : \"No intro\"} <br>\n                                                      link = <a href=\"/mod/homework/view.php?id=${homeworkInfo.course_module_id}\">link to homework</a></p>\n                                                      dueDate = ${homeworkInfo.duedate ? `Duedate is ${convertedTime}` : 'No duedate'}</p>`;\n\n                                    });\n                                    homeworkLinkDiv.innerHTML = newString;\n\n                                    // Add the divs to each other\n                                    homeworkDiv.appendChild(homeworkIconDiv);\n                                    homeworkDiv.appendChild(homeworkLinkDiv);\n\n                                    containerFluid.appendChild(homeworkDiv);\n                                }\n                            }\n                        }\n                    }, 500);\n                };\n\n                // Observer setup\n                const observer = new MutationObserver((mutations) => {\n                    mutations.forEach((mutation) => {\n                        // Determine if the modal is shown based on the show class\n                        if (mutation.target.classList.contains('show')) {\n                            addContentToModal();\n                        }\n                    });\n                });\n\n                // Observe function called when the event button is clicked\n                const observeBackdrop = () => {\n                    // Get the modal\n                    const modalBackdrop = document.querySelector('[data-region=\"modal-backdrop\"]');\n                    // Determine if the modal-backdrop is there\n                    if (modalBackdrop) {\n                        // Start observing when the modal has appeared\n                        observer.observe(modalBackdrop, {attributes: true, attributeFilter: ['class']});\n                    } else {\n                        // If the modal was not found then try again every 100 ms\n                        setTimeout(observeBackdrop, 100);\n                    }\n                };\n\n                // Perform an initial check for the modal\n                addContentToModal();\n\n                // Add an eventlistener to all event buttons\n                document.querySelectorAll('[data-region]').forEach(element => {\n                    element.addEventListener('click', addEventListenerToButtons);\n                });\n\n                function addEventListenerToButtons(event) {\n                    // Determine if the data region is an event button\n                    const target = event.target;\n                    if (target.classList.contains('eventname') || target.closest('.eventname')) {\n                        addContentToModal();\n                        observeBackdrop();\n                        // Remove the eventlistener after Moodle has appeared due to the observer being better\n                        removeEventListeners();\n                    }\n                }\n\n                function removeEventListeners() {\n                    document.querySelectorAll('[data-region]').forEach(element => {\n                        element.removeEventListener('click', addEventListenerToButtons);\n                    });\n                }\n            }\n        }\n    };\n});\n"],"names":["define","init","homework","document","querySelector","JSON","stringify","length","addContentToModal","setTimeout","modalContent","summaryContainer","eventid","getAttribute","containerFluid","Courseid","foundCourseLink","querySelectorAll","forEach","element","href","includes","regex","match","filteredHomework","Object","values","filter","work","window","location","getElementById","homeworkDiv","createElement","className","id","homeworkIconDiv","innerHTML","homeworkLinkDiv","newString","homeworkInfo","convertedTime","Date","duedate","name","intro","course_module_id","appendChild","observer","MutationObserver","mutations","mutation","target","classList","contains","observeBackdrop","modalBackdrop","observe","attributes","attributeFilter","addEventListenerToButtons","event","closest","removeEventListener","addEventListener"],"mappings":"AAAAA,2CAAO,WACH,MAAO,CACHC,KAAM,SAASC,UAEX,GAAIC,SAASC,cAAc,6BAA+BC,KAAKC,UAAUJ,UAAUK,OAAS,EAAG,CAG3F,MAAMC,kBAAoBA,KAEtBC,YAAW,KAEP,MAAMC,aAAeP,SAASC,cAAc,kBAC5C,GAAIM,aAAc,CAEd,MAAMC,iBAAmBD,aAAaN,cAAc,4BACpD,GAAIO,iBAAkB,CAElB,IAAIC,QAAUD,iBAAiBE,aAAa,iBAG5C,MAAMC,eAAiBH,iBAAiBP,cAAc,oBAEtD,IACIW,SADAC,iBAAkB,EAEtBF,eAAeG,iBAAiB,KAAKC,SAASC,UAC1C,GAAIA,QAAQC,KAAKC,SAAS,WAAY,CAClC,MAAMC,MAAQ,8BACRC,MAAQJ,QAAQC,KAAKG,MAAMD,OAKjC,OAJIC,QACAR,SAAWQ,MAAM,IAErBP,iBAAkB,GACX,CACX,KAIJ,IAAIQ,iBAAmBC,OAAOC,OAAOxB,UAAUyB,QAAQC,MAC5CA,KAAKhB,UAAYA,UAE5B,GAAgC,IAA5BY,iBAAiBjB,OACjB,OAIJ,GAAIS,iBAAmBa,OAAOC,SAASV,KAAKC,SAAS,SAAWlB,SAAS4B,eAAe,eAAgB,CAEpG,MAAMC,YAAc7B,SAAS8B,cAAc,OAC3CD,YAAYE,UAAY,WACxBF,YAAYG,GAAK,cAEjB,MAAMC,gBAAkBjC,SAAS8B,cAAc,OAC/CG,gBAAgBF,UAAY,QAC5BE,gBAAgBC,UAAY,sGAE5B,MAAMC,gBAAkBnC,SAAS8B,cAAc,OAC/CK,gBAAgBJ,UAAY,6BAE5B,IAAIK,UAAY,GAChBd,OAAOC,OAAOF,kBAAkBN,SAASsB,eACrC,IAAIC,cAAgB,IAAIC,KAA4B,IAAvBF,aAAaG,SAC1CJ,WAAa,sBAAsBC,aAAaI,4EACxBJ,aAAaK,MAAQL,aAAaK,MAAQ,oHACRL,aAAaM,+GAC7CN,aAAaG,QAAU,cAAcF,gBAAkB,kBAAkB,IAGvGH,gBAAgBD,UAAYE,UAG5BP,YAAYe,YAAYX,iBACxBJ,YAAYe,YAAYT,iBAExBxB,eAAeiC,YAAYf,YAC/B,CACJ,CACJ,IACD,IAAI,EAILgB,SAAW,IAAIC,kBAAkBC,YACnCA,UAAUhC,SAASiC,WAEXA,SAASC,OAAOC,UAAUC,SAAS,SACnC9C,mBACJ,GACF,IAIA+C,gBAAkBA,KAEpB,MAAMC,cAAgBrD,SAASC,cAAc,kCAEzCoD,cAEAR,SAASS,QAAQD,cAAe,CAACE,YAAY,EAAMC,gBAAiB,CAAC,WAGrElD,WAAW8C,gBAAiB,IAChC,EAWJ,SAASK,0BAA0BC,OAE/B,MAAMT,OAASS,MAAMT,QACjBA,OAAOC,UAAUC,SAAS,cAAgBF,OAAOU,QAAQ,iBACzDtD,oBACA+C,kBAOJpD,SAASc,iBAAiB,iBAAiBC,SAAQC,UAC/CA,QAAQ4C,oBAAoB,QAASH,0BAA0B,IAJvE,CAhBApD,oBAGAL,SAASc,iBAAiB,iBAAiBC,SAAQC,UAC/CA,QAAQ6C,iBAAiB,QAASJ,0BAA0B,GAmBpE,CACJ,EAER"}